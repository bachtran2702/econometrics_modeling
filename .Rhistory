as_tsibble()
retail_trade_employment_ts = ts(dta$retail_trade_employment, frequency = 12, start =c(2000,1))
all_employment_ts = ts(dta$all_employment, frequency = 12, start = c(2000,1))
ggAcf(retail_trade_employment_ts)
ggseasonplot(retail_trade_employment_ts)
dta %>%
gg_subseries(retail_trade_employment) +
labs(
y = "Thousands of Persons",
title = " All Employees: Retail Trade in the United States"
)
View(dta)
sum(is.na(dta))
#wrestle the data from chr type "%m/%d/%y" data to zoo type year month
dta = read.csv("employment_dta.csv", col.names = c("month", "retail_trade_employment", "all_employment")) %>%
mutate(month = as.Date(month, format = "%m/%d/%y")) %>%
mutate(retail_trade_employment = as.numeric(retail_trade_employment),
all_employment = as.numeric(all_employment))%>%
as_tsibble()
which(is.na(dta))
retail_trade_employment_ts = ts(dta$retail_trade_employment, frequency = 12, start =c(2000,1))
all_employment_ts = ts(dta$all_employment, frequency = 12, start = c(2000,1))
which(is.na(dta))
#wrestle the data from chr type "%m/%d/%y" data to zoo type year month
dta = read.csv("employment_dta.csv", col.names = c("month", "retail_trade_employment", "all_employment")) %>%
mutate(month = as.Date(month, format = "%m/%d/%y")) %>%
mutate(retail_trade_employment = as.numeric(retail_trade_employment),
all_employment = as.numeric(all_employment))%>%
as_tsibble()
retail_trade_employment_ts = ts(dta$retail_trade_employment, frequency = 12, start =c(2000,1))
all_employment_ts = ts(dta$all_employment, frequency = 12, start = c(2000,1))
View(dta)
#wrestle the data from chr type "%m/%d/%y" data to zoo type year month
dta = read.csv("employment_dta.csv", col.names = c("month", "retail_trade_employment", "all_employment")) %>%
mutate(month = as.Date(month, format = "%m/%d/%y")) %>%
mutate(retail_trade_employment = as.numeric(retail_trade_employment),
all_employment = as.numeric(all_employment))%>%
as_tsibble()
retail_trade_employment_ts = ts(dta$retail_trade_employment, frequency = 12, start =c(2000,1))
all_employment_ts = ts(dta$all_employment, frequency = 12, start = c(2000,1))
ggAcf(retail_trade_employment_ts)
ggseasonplot(retail_trade_employment_ts)
dta %>%
gg_subseries(retail_trade_employment) +
labs(
y = "Thousands of Persons",
title = " All Employees: Retail Trade in the United States"
)
#wrestle the data from chr type "%m/%d/%y" data to zoo type year month
dta = read.csv("employment_dta.csv", col.names = c("month", "retail_trade_employment", "all_employment")) %>%
mutate(month = year_month(as.Date(month, format = "%m/%d/%y")) %>%
mutate(retail_trade_employment = as.numeric(retail_trade_employment),
all_employment = as.numeric(all_employment))%>%
as_tsibble()
retail_trade_employment_ts = ts(dta$retail_trade_employment, frequency = 12, start =c(2000,1))
#wrestle the data from chr type "%m/%d/%y" data to zoo type year month
dta = read.csv("employment_dta.csv", col.names = c("month", "retail_trade_employment", "all_employment")) %>%
mutate(month = year_month(as.Date(month, format = "%m/%d/%y"))) %>%
mutate(retail_trade_employment = as.numeric(retail_trade_employment),
all_employment = as.numeric(all_employment))%>%
as_tsibble()
#wrestle the data from chr type "%m/%d/%y" data to zoo type year month
dta = read.csv("employment_dta.csv", col.names = c("month", "retail_trade_employment", "all_employment")) %>%
mutate(month = year_monthas.Date(month, format = "%m/%d/%y")) %>%
mutate(retail_trade_employment = as.numeric(retail_trade_employment),
all_employment = as.numeric(all_employment))%>%
as_tsibble()
#wrestle the data from chr type "%m/%d/%y" data to zoo type year month
dta = read.csv("employment_dta.csv", col.names = c("month", "retail_trade_employment", "all_employment")) %>%
mutate(month = year_month(as.Date(month, format = "%m/%d/%y"))) %>%
mutate(retail_trade_employment = as.numeric(retail_trade_employment),
all_employment = as.numeric(all_employment))%>%
as_tsibble()
#wrestle the data from chr type "%m/%d/%y" data to zoo type year month
dta = read.csv("employment_dta.csv", col.names = c("month", "retail_trade_employment", "all_employment")) %>%
mutate(month = yearmonth(as.Date(month, format = "%m/%d/%y"))) %>%
mutate(retail_trade_employment = as.numeric(retail_trade_employment),
all_employment = as.numeric(all_employment))%>%
as_tsibble()
retail_trade_employment_ts = ts(dta$retail_trade_employment, frequency = 12, start =c(2000,1))
all_employment_ts = ts(dta$all_employment, frequency = 12, start = c(2000,1))
ggAcf(retail_trade_employment_ts)
ggseasonplot(retail_trade_employment_ts)
dta %>%
gg_subseries(retail_trade_employment) +
labs(
y = "Thousands of Persons",
title = " All Employees: Retail Trade in the United States"
)
ggAcf(all_employment_ts)
ggseasonplot(all_employment_ts)
gg_subseries(all_employment_ts) +
labs(
y = "Thousands of Persons",
title = " All Employees: Retail Trade in California"
)
ggAcf(retail_trade_employment_ts)
ggseasonplot(retail_trade_employment_ts)
dta %>%
gg_subseries(retail_trade_employment) +
labs(
y = "Thousands of Persons",
title = " All Employees: Retail Trade in the United States"
)
ggAcf(all_employment_ts)
ggseasonplot(all_employment_ts)
dta %>%
gg_subseries(all_employment_ts) +
labs(
y = "Thousands of Persons",
title = " All Employees: Retail Trade in California"
)
ggAcf(retail_trade_employment_ts)
ggseasonplot(retail_trade_employment_ts)
dta %>%
gg_subseries(retail_trade_employment) +
labs(
y = "Thousands of Persons",
title = " All Employees: Retail Trade in the United States"
)
ggAcf(all_employment_ts)
ggseasonplot(all_employment_ts)
dta %>%
gg_subseries(all_employment_ts) +
labs(
y = "Thousands of Persons",
title = " All non-farm employees in California"
)
?gg_subseries
ggAcf(retail_trade_employment_ts)
ggseasonplot(retail_trade_employment_ts)
dta %>%
gg_subseries(retail_trade_employment) +
labs(
y = "Thousands of Persons",
title = " All Employees: Retail Trade in the United States"
)
ggAcf(all_employment_ts)
ggseasonplot(all_employment_ts)
dta %>%
gg_subseries(all_employment_ts) +
labs(
y = "Thousands of Persons",
title = " All non-farm employees in California"
) +
scale_fill_discrete()
ggAcf(retail_trade_employment_ts)
ggseasonplot(retail_trade_employment_ts)
dta %>%
gg_subseries(retail_trade_employment) +
labs(
y = "Thousands of Persons",
title = " All Employees: Retail Trade in the United States"
)
ggAcf(all_employment_ts)
ggseasonplot(all_employment_ts)
dta %>%
gg_subseries(all_employment_ts) +
labs(
y = "Thousands of Persons",
title = " All non-farm employees in California"
) +
scale_fill_gradient()
#wrestle the data from chr type "%m/%d/%y" data to zoo type year month
dta = read.csv("employment_dta.csv", col.names = c("month", "retail_trade_employment", "all_employment")) %>%
mutate(month = yearmonth(as.Date(month, format = "%m/%d/%y"))) %>%
mutate(retail_trade_employment = as.numeric(retail_trade_employment),
all_employment = as.numeric(all_employment))%>%
as_tsibble()
retail_trade_employment_ts = ts(dta$retail_trade_employment, frequency = 12, start =c(2000,1))
all_employment_ts = ts(dta$all_employment, frequency = 12, start = c(2000,1))
library(dplyr)
library(forecast)
library(PerformanceAnalytics)
library(stats)
library(tidyr)
library(tseries)
library(TTR)
library(zoo)
library(lubridate)
library(car)
library(ggplot2)
library(quantmod)
library(tsibble)
library(xts)
library(tibble)
library(fpp3)
library(extrafont)
fit_0_ae = forecast::hw(all_employment_ts, seasonal = "additive", damped = T, h = 14)
#subset for a smaller window due to previous model doesnt yield best result
all_employment_ts_window = window(all_employment_ts, start = c(2010,1))
#model 2
fit_1_ae = forecast::hw(all_employment_ts_window, seasonal = "multiplicative", damped =T, h = 14)
fit_2_ae = forecast::hw(all_employment_ts_window, seasonal = "additive", damped = T, h = 14)
fit_3_ae = auto.arima(all_employment_ts_window)%>%
forecast(h = 14)
fit_4_ae = forecast::ets(all_employment_ts_window)%>%
forecast(h = 12)
autoplot(fit_1_ae)
autoplot(fit_2_ae)
autoplot (fit_3_ae)
autoplot (fit_4_ae)
checkresiduals(fit_1_ae)
checkresiduals(fit_2_ae)
checkresiduals(fit_3_ae)
checkresiduals(fit_4_ae)
fit_5_ae = forecast::hw(all_employment_ts, seasonal = "additive", damped = T, h = 14)
#subset for a smaller window due to previous model doesnt yield best result
all_employment_ts_window = window(all_employment_ts, start = c(2010,1))
#model 2
fit_6_ae = forecast::hw(all_employment_ts_window, seasonal = "multiplicative", damped =T, h = 14)
fit_7_ae = forecast::hw(all_employment_ts_window, seasonal = "additive", damped = T, h = 14)
fit_8_ae = auto.arima(all_employment_ts_window)%>%
forecast(h = 14)
fit_9_ae = forecast::ets(all_employment_ts_window)%>%
forecast(h = 12)
autoplot(fit_6_ae)
autoplot(fit_7_ae)
autoplot (fit_8_ae)
autoplot (fit_9_ae)
checkresiduals(fit_6_ae)
checkresiduals(fit_7_ae)
checkresiduals(fit_8_ae)
checkresiduals(fit_9_ae)
library(dplyr)
library(PerformanceAnalytics)
library(stats)
library(tidyr)
library(tseries)
library(TTR)
library(zoo)
library(forecast)
library(lubridate)
library(car)
library(ggplot2)
library(quantmod)
library(tsibble)
library(xts)
library(tibble)
library(fpp3)
library(extrafont)
#subset period
start = "2018-09-01"
end = "2024-10-31"
# Assign SPY data to 'spy'
spy = getSymbols("SPY", auto.assign = F, from = start, to = end)
#Extract adjusted close
spy_adj = Ad(spy)
monthly_spy_adj = apply.monthly(spy_adj, FUN = mean)
#convert xts to data frame
spy_df = as.data.frame(monthly_spy_adj) %>%
rownames_to_column(var = "month")
#wrestle the data to year month
spy_df = spy_df%>%
mutate(month = yearmonth(month))
library(dplyr)
library(PerformanceAnalytics)
library(stats)
library(tidyr)
library(tseries)
library(TTR)
library(zoo)
library(forecast)
library(lubridate)
library(car)
library(ggplot2)
library(quantmod)
library(tsibble)
library(xts)
library(tibble)
library(fpp3)
library(extrafont)
#wrestle the data from chr type "%m/%d/%y" data to zoo type year month
dta = read.csv("base_model_dta.csv", col.names = c("month", "unemployment_r", "fed_fund_r", "consumer_sent")) %>%
mutate(month = as.character(
as.Date(month, format = "%m/%d/%y"))
) %>%
mutate(month = yearmonth(month))
#subset period
start = "2018-09-01"
end = "2024-10-31"
# Assign SPY data to 'spy'
spy = getSymbols("SPY", auto.assign = F, from = start, to = end)
#Extract adjusted close
spy_adj = Ad(spy)
monthly_spy_adj = apply.monthly(spy_adj, FUN = mean)
#convert xts to data frame
spy_df = as.data.frame(monthly_spy_adj) %>%
rownames_to_column(var = "month")
#wrestle the data to year month
spy_df = spy_df%>%
mutate(month = yearmonth(month))
combined = merge(dta, spy_df)
analysis_rdy_tsibble = combined%>%
as_tsibble(index = month)
#as time series
library("PerformanceAnalytics")
ggplot(combined, aes(x = month)) +
geom_line(aes(y = unemployment_r), color = "#ED3833") +
geom_line(aes(y = fed_fund_r), color ="#073D7F") +
labs(y = "Price ", x = "Year" )
#higher unemployment earlier of the year, lower at the end of the year; unemployment in 2024 is on par with non-pandemic year
gg_season(analysis_rdy_tsibble, unemployment_r)
gg_subseries(analysis_rdy_tsibble, unemployment_r)
#no clear trend in stock performance  M-o-M. Market is at an all tiome high and continue growing
#I changed the color scale because this is just slightly easier to see compare to the default.
gg_season(analysis_rdy_tsibble, SPY.Adjusted, pal = (scales::viridis_pal())(9))
gg_subseries(analysis_rdy_tsibble,  SPY.Adjusted)
#model fit a model to predict consumer sentiment for October
fit_csi = lm(consumer_sent ~ unemployment_r + fed_fund_r + SPY.Adjusted + month + fed_fund_r:SPY.Adjusted, data = analysis_rdy_tsibble)
summary(fit_csi)
oct_data = tibble(unemployment_r = 3.9, fed_fund_r =4.83, SPY.Adjusted = 577.7850,
month = yearmonth("2024-10"))
imputed_data = as.numeric(predict(fit_csi, oct_data))
#linear model assumptions check
# pass the residuals of linear regression model
res = resid(fit_csi)
# residual plot
plot(fit_csi,1)
# QQ plot
plot(fit_csi,2)
# scale-location-plot
plot(fit_csi,3)
# stats test. Since p-value > 0.05, residuals arae normally distributed
shapiro.test(residuals(fit_csi))
month_index_historical = seq(as.Date("2018-09-01"), as.Date("2024-10-1"), by = "1 month")
month_index_forecasted = seq(as.Date("2024-11-1"), as.Date("2028-1-1"), by = "1 month")
#"S&P 500 Performance
vis_model =autoplot(fc)
#"S&P 500 Performance
vis_model =autoplot(fc)
#base model:
fit = auto.arima(analysis_rdy_tsibble$SPY.Adjusted)
summary(fit)
#model 2
fit2 = auto.arima(analysis_rdy_tsibble$SPY.Adjusted, stepwise = F)
summary(fit2)
fit2%>%forecast(h=12)%>% autoplot()
#model 3
#regressors matrix
xreg = cbind(fed_fund_r = as.numeric(unlist(analysis_rdy_tsibble[,"fed_fund_r"])),
unemployment_r= as.numeric(unlist(analysis_rdy_tsibble[,"unemployment_r"])),
consumer_sent = as.numeric(unlist(analysis_rdy_tsibble[,"consumer_sent"])))
fit_sp = auto.arima(analysis_rdy_tsibble[,"SPY.Adjusted"], xreg = xreg, stepwise = T,seasonal = F)
summary(fit_sp)
analysis_rdy_tsibble%>%
gg_tsdisplay(SPY.Adjusted)
# Use model 3 because it performs best.assumptions for final model
csi_model = auto.arima(analysis_rdy_tsibble[,"consumer_sent"], stepwise = T) #AIC is high, large se bands, more uncertainty. Therefore:
# flat lining rate at 3% fed fund r, consumer sentiment is from 70 to 80 with an increase of 2 monthly based on market reaction toward political events
new_data = cbind( fed_fund_r = rep(4.6,12),
unemployment_r= rep(3.8,12),
consumer_sent =seq(70,94,2))
#forecast
fc = forecast(fit_sp, xreg = new_data,h = 12)
checkresiduals(fc)
#fix date index
month_index_historical = seq(as.Date("2018-09-01"), as.Date("2024-10-1"), by = "1 month")
month_index_forecasted = seq(as.Date("2024-11-1"), as.Date("2028-1-1"), by = "1 month")
#"S&P 500 Performance
vis_model =autoplot(fc)
forecast_graph = vis_model + aes(color = "#ED3833", labels = "Historical Data") +
ylim(200,800) +
#scales
scale_y_continuous(n.breaks = 10) +
labs(x= "Monthly Data", y = "Dollars", caption = "Time Index: 1 = September 2018. Usage of SPDR's S&P 500 Trust ETF because scale and better fit for this model") +
#positions of title
theme(text=element_text(family="Calibri"),
plot.title = element_blank(),
#plot caption
plot.caption.position =  "plot",
plot.caption = element_text(hjust = 0)) +
theme(panel.grid.major.y = element_line(color = "#DDD9C3"),
panel.background = element_blank())  +
#remove background and tick marks and legend
theme(axis.ticks.y = element_blank(),
axis.line = element_line(color = "black", size = 0.75, linetype = "solid"),
legend.position = "none") +
#start period
annotate(geom = "point", x = 75, y = 575.7267, colour = "red", size = 1.5) +
annotate(geom = "text", x = 75, y = 575.7267, label = "$575.73", hjust = 1.2, size = 3.3) +
annotate(geom = "point", x = 87, y = 658.7358, colour = "red", size = 1.5) +
annotate(geom = "text", x = 87, y = 658.7358, label = "$658.74", vjust = -1.8, size = 3.3)
ggsave('graph.png', width = 9.75, height = 4.75, units = "in")
#width = 39, height = 19, units = "in"
#fix date index
month_index_historical = seq(as.Date("2018-09-01"), as.Date("2024-10-1"), by = "1 month")
month_index_forecasted = seq(as.Date("2024-11-1"), as.Date("2028-1-1"), by = "1 month")
#"S&P 500 Performance
vis_model =autoplot(fc)
forecast_graph = vis_model + aes(color = "#ED3833", labels = "Historical Data") +
ylim(200,800) +
#scales
scale_y_continuous(n.breaks = 10) +
labs(x= "Monthly Data", y = "Dollars", caption = "Time Index: 1 = September 2018. Usage of SPDR's S&P 500 Trust ETF because scale and better fit for this model") +
#positions of title
theme(text=element_text(family="Calibri"),
plot.title = element_blank(),
#plot caption
plot.caption.position =  "plot",
plot.caption = element_text(hjust = 0)) +
theme(panel.grid.major.y = element_line(color = "#DDD9C3"),
panel.background = element_blank())  +
#remove background and tick marks and legend
theme(axis.ticks.y = element_blank(),
axis.line = element_line(color = "black", size = 0.75, linetype = "solid"),
legend.position = "none") +
#start period
annotate(geom = "point", x = 75, y = 575.7267, colour = "red", size = 1.5) +
annotate(geom = "text", x = 75, y = 575.7267, label = "$575.73", hjust = 1.2, size = 3.3) +
annotate(geom = "point", x = 87, y = 658.7358, colour = "red", size = 1.5) +
annotate(geom = "text", x = 87, y = 658.7358, label = "$658.74", vjust = -1.8, size = 3.3)
ggsave('graph.png', width = 9.75, height = 4.75, units = "in")
#width = 39, height = 19, units = "in"
ggsave('SP_500_forecast.png', width = 9.75, height = 4.75, units = "in")
#width = 39, height = 19, units = "in"
View(forecast_graph)
View(fc)
fc[["mean"]]
#fix date index
month_index_historical = seq(as.Date("2018-09-01"), as.Date("2024-10-1"), by = "1 month")
month_index_forecasted = seq(as.Date("2024-11-1"), as.Date("2028-1-1"), by = "1 month")
#"S&P 500 Performance
vis_model =autoplot(fc)
forecast_graph = vis_model + aes(color = "#ED3833", labels = "Historical Data") +
ylim(200,800) +
#scales
scale_y_continuous(n.breaks = 10) +
labs(x= "Monthly Data", y = "Dollars", caption = "Time Index: 1 = September 2018. Usage of SPDR's S&P 500 Trust ETF because scale and better fit for this model") +
#positions of title
theme(text=element_text(family="Calibri"),
plot.title = element_blank(),
#plot caption
plot.caption.position =  "plot",
plot.caption = element_text(hjust = 0)) +
theme(panel.grid.major.y = element_line(color = "#DDD9C3"),
panel.background = element_blank())  +
#remove background and tick marks and legend
theme(axis.ticks.y = element_blank(),
axis.line = element_line(color = "black", size = 0.75, linetype = "solid"),
legend.position = "none") +
#start period
annotate(geom = "point", x = 75, y = 573.4502, colour = "red", size = 1.5) +
annotate(geom = "text", x = 75, y = 573.4502, label = "$575.73", hjust = 1.2, size = 3.3) +
annotate(geom = "point", x = 87, y = 639.2752, colour = "red", size = 1.5) +
annotate(geom = "text", x = 87, y = 639.2752, label = "$658.74", vjust = -1.8, size = 3.3)
ggsave('graph.png', width = 9.75, height = 4.75, units = "in")
#width = 39, height = 19, units = "in"
ggsave('SP_500_forecast.png', width = 9.75, height = 4.75, units = "in")
#width = 39, height = 19, units = "in"
#fix date index
month_index_historical = seq(as.Date("2018-09-01"), as.Date("2024-10-1"), by = "1 month")
month_index_forecasted = seq(as.Date("2024-11-1"), as.Date("2028-1-1"), by = "1 month")
#"S&P 500 Performance
vis_model =autoplot(fc)
forecast_graph = vis_model + aes(color = "#ED3833", labels = "Historical Data") +
ylim(200,800) +
#scales
scale_y_continuous(n.breaks = 10) +
labs(x= "Monthly Data", y = "Dollars", caption = "Time Index: 1 = September 2018. Usage of SPDR's S&P 500 Trust ETF because scale and better fit for this model") +
#positions of title
theme(text=element_text(family="Calibri"),
plot.title = element_blank(),
#plot caption
plot.caption.position =  "plot",
plot.caption = element_text(hjust = 0)) +
theme(panel.grid.major.y = element_line(color = "#DDD9C3"),
panel.background = element_blank())  +
#remove background and tick marks and legend
theme(axis.ticks.y = element_blank(),
axis.line = element_line(color = "black", size = 0.75, linetype = "solid"),
legend.position = "none") +
#start period
annotate(geom = "point", x = 75, y = 560.2852, colour = "red", size = 1.5) +
annotate(geom = "text", x = 75, y = 560.2852, label = "$575.73", hjust = 1.2, size = 3.3) +
annotate(geom = "point", x = 87, y = 639.2752, colour = "red", size = 1.5) +
annotate(geom = "text", x = 87, y = 639.2752, label = "$658.74", vjust = -1.8, size = 3.3)
ggsave('graph.png', width = 9.75, height = 4.75, units = "in")
#width = 39, height = 19, units = "in"
ggsave('SP_500_forecast.png', width = 9.75, height = 4.75, units = "in")
#width = 39, height = 19, units = "in"
#fix date index
month_index_historical = seq(as.Date("2018-09-01"), as.Date("2024-10-1"), by = "1 month")
month_index_forecasted = seq(as.Date("2024-11-1"), as.Date("2028-1-1"), by = "1 month")
#"S&P 500 Performance
vis_model =autoplot(fc)
forecast_graph = vis_model + aes(color = "#ED3833", labels = "Historical Data") +
ylim(200,800) +
#scales
scale_y_continuous(n.breaks = 10) +
labs(x= "Monthly Data", y = "Dollars", caption = "Time Index: 1 = September 2018. Usage of SPDR's S&P 500 Trust ETF because scale and better fit for this model") +
#positions of title
theme(text=element_text(family="Calibri"),
plot.title = element_blank(),
#plot caption
plot.caption.position =  "plot",
plot.caption = element_text(hjust = 0)) +
theme(panel.grid.major.y = element_line(color = "#DDD9C3"),
panel.background = element_blank())  +
#remove background and tick marks and legend
theme(axis.ticks.y = element_blank(),
axis.line = element_line(color = "black", size = 0.75, linetype = "solid"),
legend.position = "none") +
#start period
annotate(geom = "point", x = 75, y = 560.2852, colour = "red", size = 1.5) +
annotate(geom = "text", x = 75, y = 560.2852, label = "$560.29", hjust = 1.2, size = 3.3) +
annotate(geom = "point", x = 87, y = 639.2752, colour = "red", size = 1.5) +
annotate(geom = "text", x = 87, y = 639.2752, label = "$639.28", vjust = -1.8, size = 3.3)
ggsave('graph.png', width = 9.75, height = 4.75, units = "in")
#width = 39, height = 19, units = "in"
ggsave('SP_500_forecast.png', width = 9.75, height = 4.75, units = "in")
#width = 39, height = 19, units = "in"
